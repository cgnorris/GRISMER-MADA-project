---
title: "Data Analysis for Raw Tick-Bourne Cases Data - 2019 to 2024"
author: "Hope Grismer"
date: "2025-03-10"
output: html_document
---

```{r}
## ---- setup --------
library(tidymodels)
library(readr)
library(dplyr)
library(here)

## ---- load_data --------
# Load cleaned modeling dataset
model_data <- read_csv(here("data", "processed-data", "time_between_processeddata.csv"))

# Load Gini index data (must have columns COUNTY and GINI_INDEX)
gini_data <- read_csv(here("data", "external-data", "gini_index_by_county.csv"))

# Merge datasets on COUNTY
model_data <- model_data %>%
  left_join(gini_data, by = "COUNTY") %>%
  mutate(
    delay_over_threshold = as.factor(delay_over_threshold),
    COUNTY = as.factor(COUNTY)
  ) %>%
  drop_na(delay_over_threshold, COUNTY, GINI_INDEX)

## ---- data_split --------
set.seed(123)
data_split <- initial_split(model_data, prop = 0.8, strata = delay_over_threshold)
train_data <- training(data_split)
test_data <- testing(data_split)

## ---- recipe --------
delay_recipe <- recipe(delay_over_threshold ~ COUNTY + GINI_INDEX, data = train_data) %>%
  step_dummy(all_nominal_predictors()) %>%
  step_normalize(all_numeric_predictors())

## ---- models --------
logistic_model <- logistic_reg() %>%
  set_engine("glm") %>%
  set_mode("classification")

tree_model <- decision_tree() %>%
  set_engine("rpart") %>%
  set_mode("classification")

rf_model <- rand_forest(trees = 500) %>%
  set_engine("ranger") %>%
  set_mode("classification")

## ---- workflows --------
logistic_workflow <- workflow() %>%
  add_recipe(delay_recipe) %>%
  add_model(logistic_model)

tree_workflow <- workflow() %>%
  add_recipe(delay_recipe) %>%
  add_model(tree_model)

rf_workflow <- workflow() %>%
  add_recipe(delay_recipe) %>%
  add_model(rf_model)

## ---- cross_validation --------
set.seed(123)
cv_folds <- vfold_cv(train_data, v = 5, repeats = 3, strata = delay_over_threshold)

# Fit all models
logistic_res <- fit_resamples(logistic_workflow, resamples = cv_folds, metrics = metric_set(accuracy, roc_auc))
tree_res     <- fit_resamples(tree_workflow, resamples = cv_folds, metrics = metric_set(accuracy, roc_auc))
rf_res       <- fit_resamples(rf_workflow, resamples = cv_folds, metrics = metric_set(accuracy, roc_auc))

## ---- compare_models --------
collect_metrics(logistic_res)
collect_metrics(tree_res)
collect_metrics(rf_res)

## ---- final_evaluation --------
final_rf_fit <- rf_workflow %>%
  last_fit(data_split)

# Metrics
collect_metrics(final_rf_fit)

# Confusion matrix
conf_mat <- collect_predictions(final_rf_fit) %>%
  conf_mat(truth = delay_over_threshold, estimate = .pred_class)

# ROC plot
roc_plot <- collect_predictions(final_rf_fit) %>%
  roc_curve(truth = delay_over_threshold, .pred_1) %>%
  autoplot() +
  theme_minimal() +
  labs(title = "ROC Curve – Random Forest (County + Gini Only)")

ggsave(
  filename = here("results", "figures", "roc_curve_gini_model.png"),
  plot = roc_plot,
  width = 6, height = 5, dpi = 300
)

# Save confusion matrix plot (optional)
conf_plot <- autoplot(conf_mat, type = "heatmap") +
  scale_fill_gradient(low = "white", high = "#2C3E50") +
  theme_minimal() +
  labs(title = "Confusion Matrix – Random Forest")

ggsave(
  filename = here("results", "figures", "conf_matrix_gini_model.png"),
  plot = conf_plot,
  width = 5, height = 5, dpi = 300
)

```

